// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @unique @default(cuid())
  email      String?      @unique
  name       String?
  anon       Boolean
  Jam        Jam[]
  QueueSongs QueueSongs[]
  Session    Session[]
  UserInJam  UserInJam[]
  // exp is only when the user is anon
  exp        DateTime?

  // spotify
  sec_spotifyAccessToken  String?
  sec_spotifyRefreshToken String?
}

model UserInJam {
  id         String   @id @unique @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  jam        Jam      @relation(fields: [jamId], references: [id])
  jamId      String
  lastUpdate DateTime @default(now())

  vibes Int @default(5)
}

model Session {
  id     String   @id @unique @default(cuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  exp    DateTime
}

model Jam {
  id                  String       @id @unique @default(cuid())
  phrase              String       @unique @default(cuid())
  owner               User         @relation(fields: [userId], references: [id])
  userId              String
  spotify             Json
  exp                 DateTime
  QueueSongs          QueueSongs[]
  Worker              Worker[]
  UserInJam           UserInJam[]
  VibeRefreshInterval Int          @default(60)
}

model QueueSongs {
  id String @id @unique @default(cuid())

  // relations
  submittor User   @relation(fields: [userId], references: [id])
  userId    String
  jam       Jam    @relation(fields: [jamId], references: [id])
  jamId     String

  // info that can be displaed in the queue
  rank          Int     @default(5)
  name          String
  artist        String
  imageUrl      String?
  spotifyUri    String?
  albumCoverUrl String?
}

model Worker {
  id    String @id @unique @default(cuid())
  jam   Jam    @relation(fields: [jamId], references: [id])
  jamId String
}

model SpotifyState {
  id     String   @id @unique @default(uuid())
  exp    DateTime
  userId String
  jamId  String   @default("null") // hack
}

model Secrets {
  id             String   @id @unique @default(cuid())
  exp            DateTime
  encryptedValue String
  iv             Bytes
}

model WorkerTask {
  id        Int       @id @unique @default(autoincrement())
  taken     Boolean   @default(false)
  data      Json
  task_name String
  exp       DateTime?
  ttl       Int       @default(70)
}

model WorkerLocks {
  id        Int       @id @unique @default(autoincrement())
  key       String    @unique
  issued_to String
  // if expired, another can take the lock
  exp       DateTime?
}
